<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - @(ViewBag.CompanyName ?? "Sanat Galerisi")</title>
    <meta name="description" content="@ViewData["MetaDescription"]" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="~/js/tailwind.config.js" asp-append-version="true"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-SgOJa3DmI69IUzQ2PVdRZhwQ+dy64/BUtbMJw1MZ8t5HZApcHrRKUc4W0kG879m7" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.css" />
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    

    @await Component.InvokeAsync("GetColors")
    @await RenderSectionAsync("Styles", required: false)
</head>
<body class="min-h-screen bg-gray-50">

    @await Component.InvokeAsync("Navbar")
    @await Component.InvokeAsync("Carousel", ViewData["PageUrl"])


    <main role="main" >
        @RenderBody()
    </main>

   @await Component.InvokeAsync("ListCP", ViewData["PageUrl"])


   @await Component.InvokeAsync("Footer")

   <script src="~/lib/jquery/dist/jquery.min.js"></script>
   <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/ScrollTrigger.min.js"></script>
   <script src="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.js"></script>
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        document.querySelector('.mobile-menu-button').addEventListener('click', function() {
            document.querySelector('#mobile-menu').classList.toggle('hidden');
        });
    </script>
    <script>
            document.addEventListener('DOMContentLoaded', function() {
                let heroSwiper;
                setTimeout(() => {
                    heroSwiper = new Swiper('.hero-slider', {
                        loop: true,
                        speed: 1000,
                        autoplay: {
                            delay: 5000,
                            disableOnInteraction: false,
                        },
                        pagination: {
                            el: '.swiper-pagination',
                            clickable: true,
                        },
                        navigation: {
                            nextEl: '.swiper-button-next',
                            prevEl: '.swiper-button-prev',
                        },
                    });
                }, 100);

                // Image optimization - load remaining images after page load
                const deferredImages = document.querySelectorAll('img[data-src]');
                if (deferredImages.length > 0) {
                    setTimeout(() => {
                        deferredImages.forEach(img => {
                            img.src = img.getAttribute('data-src');
                            img.removeAttribute('data-src');
                        });
                    }, 300);
                }

                // Initialize AOS
                AOS.init({
                    duration: 800,
                    easing: 'ease-in-out',
                    once: true,
                    offset: 100
                });

                // Initialize GSAP animations
                gsap.registerPlugin(ScrollTrigger);

                gsap.utils.toArray('.animate-on-scroll').forEach(section => {
                    gsap.from(section, {
                        y: 50,
                        opacity: 0,
                        duration: 1,
                        ease: 'power3.out',
                        scrollTrigger: {
                            trigger: section,
                            start: 'top 80%',
                        }
                    });
                });
            });

            // Mobile Menu Toggle
            const hamburger = document.querySelector('.hamburger-menu');
            const sidebar = document.querySelector('.sidebar');
            const overlay = document.querySelector('.overlay');
            const sidebarClose = document.querySelector('.sidebar-close');

            function toggleSidebar() {
                sidebar.classList.toggle('active');
                overlay.classList.toggle('active');
                document.body.classList.toggle('overflow-hidden');
            }

            if (hamburger && sidebar && overlay && sidebarClose) {
                hamburger.addEventListener('click', toggleSidebar);
                overlay.addEventListener('click', toggleSidebar);
                sidebarClose.addEventListener('click', toggleSidebar);
            }

            // Mobile submenu functionality
            const submenuTrigger = document.querySelector('.mobile-nav-link.has-submenu');
            const submenu = document.querySelector('.mobile-gallery-submenu');

            if (submenuTrigger && submenu) {
                submenuTrigger.addEventListener('click', (e) => {
                    e.preventDefault();
                    submenu.classList.toggle('active');
                    submenuTrigger.classList.toggle('active');
                });
            }

            // Close sidebar when clicking on a mobile nav link (except submenu trigger)
            const mobileNavLinks = document.querySelectorAll('.mobile-nav-link:not(.has-submenu)');
            mobileNavLinks.forEach(link => {
                link.addEventListener('click', toggleSidebar);
            });
    </script>
    
   <script>
        let lastScrollTop = 0;
        let navbar = document.querySelector('header');

        const triggerPercentage = 20;

        window.addEventListener('scroll', function () {
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          const documentHeight = document.documentElement.scrollHeight - window.innerHeight;
          const scrollPercent = (scrollTop / documentHeight) * 100;

          if (scrollPercent < triggerPercentage) {
            return;
          }

          if (scrollTop > lastScrollTop) {
            navbar.style.top = '-10rem';
          } else {
            navbar.style.top = '0';
          }

          lastScrollTop = scrollTop;
        });

    </script>
   
   @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
